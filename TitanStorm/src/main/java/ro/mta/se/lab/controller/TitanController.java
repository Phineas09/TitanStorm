package ro.mta.se.lab.controller;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;

import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.GridPane;
import org.json.JSONArray;
import org.json.JSONObject;
import ro.mta.se.lab.controller.exceptions.TitanException;
import ro.mta.se.lab.model.City;
import ro.mta.se.lab.model.WeatherModel;
import ro.mta.se.lab.view.TitanLogger;
import ro.mta.se.lab.view.TitanScene;

import java.io.File;
import java.io.FileWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * The main controller of the program for the TitanScene it controls the requests via the WeatherProvider,
 * handles the events via eventHandlers and TitanThread and changes the static view TitanScene.
 */
public class TitanController {

    /**
     * THe ComboBox that contains the country code list
     */
    @FXML
    private ComboBox<String> countryDropdown;

    /**
     * THe ComboBox that contains the city names list
     */
    @FXML
    private ComboBox<City> cityDropdown;

    /**
     * THe ImageView that contains the icon of the current weather
     */
    @FXML
    private ImageView currentWeatherIcon;

    /**
     * THe GridPane that all the Panes with the forecast for other days other than the current one
     */
    @FXML
    private GridPane bottomGridPane;

    /**
     * Additional data for the controller
     */
    private HashMap<String, ArrayList<City>> countryList;
    private AutoCompleteComboBox<String> autoCompleteCityDropdown;
    private AutoCompleteComboBox<String> autoCompleteCountryDropdown;
    private WeatherProvider weatherProvider;

    /**
     * Default constructor, i think it's never used, but you never know.
     */
    public TitanController() {
    }

    /**
     * Provided the country list as an HashMap it will initialize all data.
     *
     * @param countryList HashMap with keys Country, each key will have a list of City
     */
    public TitanController(HashMap<String, ArrayList<City>> countryList) {
        this.countryList = countryList;
        weatherProvider = new WeatherProvider();
    }

    /**
     * Initialize the comboBoxes with data, make the comboBoxes searchable and find the current location
     * and display the forecast for it.
     *
     * @see #threadDispatcherGetCurrentLocationForecast
     */
    @FXML
    private void initialize() {
        Set<String> sortedKeys = new TreeSet<>(countryList.keySet());
        countryDropdown.setItems(FXCollections.observableArrayList(sortedKeys));

        autoCompleteCountryDropdown = new AutoCompleteComboBox<>(countryDropdown);
        autoCompleteCityDropdown = new AutoCompleteComboBox<>(cityDropdown);
        threadDispatcherGetCurrentLocationForecast();
    }

    /**
     * Event handler for the red refresh button <p>
     * It will refresh the forecast for the selected city in the cityDropdown.
     *
     * @param mouseEvent the click event of the refresh icon image
     */
    @FXML
    private void refreshCurrentForecastHandler(MouseEvent mouseEvent) {
        try {
            threadDispatcherSetForecast(cityDropdown.getSelectionModel().getSelectedItem());
            TitanLogger.getInstance().write("Refreshing forecast!", 2, 3);
        } catch (Exception ex) {
            System.out.println(ex.getCause());
        }
    }

    /**
     * Event handler for the red location button <p>
     * It will find the current location via threadDispatcherGetCurrentLocationForecast function.
     *
     * @see #threadDispatcherGetCurrentLocationForecast
     * @param mouseEvent the click event of the location icon image
     */
    @FXML
    private void getCurrentLocationForecastHandler(MouseEvent mouseEvent) {
        threadDispatcherGetCurrentLocationForecast();
    }

    /**
     * This function handles all the changes that can occur from the cityDropdown ComboBox
     * If a new item is selected the forecast for the selected city will be displayed.
     *
     * @see #threadDispatcherSetForecast
     * @param event ActionEvent generated by the change of the selection inside the ComboBox
     */
    @FXML
    private void cityActionHandler(ActionEvent event) {
        try {
            threadDispatcherSetForecast(cityDropdown.getSelectionModel().getSelectedItem());
        } catch (Exception ex) {
        }
    }

    /**
     * This function handles the of the selected country, this will change the data inside the cityDropdown ComboBox
     * with a list of cities from the selected country.
     *
     * @param event ActionEvent generated by the change of the selection inside the ComboBox
     */
    @FXML
    private void countryActionHandler(ActionEvent event) {
        try {
            cityDropdown.setItems(FXCollections.observableArrayList(
                    countryList.get(countryDropdown.getSelectionModel().getSelectedItem())));
            autoCompleteCityDropdown.refreshData();
            //cityDropdown.getSelectionModel().select(0);
        } catch (Exception e) {
            //This can occur from the search
        }
    }

    /**
     * This handler triggers in the case of selecting an element from the bottomGridPane, this
     * will load into the main view the data of the selected day ( from the 6 day ahead forecast )
     * and will uncheck all other selection, if the same selection is made the current day
     * forecast will be loaded.
     *
     * @param mouseEvent the selection of a day
     * @see #loadMainWeatherForecast
     */
    @FXML
    private void bottomGridPaneElementSelectedHandler(MouseEvent mouseEvent) {
        try {
            AnchorPane anchorPaneTarget = (AnchorPane) mouseEvent.getSource();
            if (anchorPaneTarget.getStyleClass().contains("clickedAnchorPane")) {
                //Uncheck and load current weather
                loadMainWeatherForecast(weatherProvider.getForecastList().get(0));
                clearAllSelectionsFromBottomPane();
                return;
            }
            clearAllSelectionsFromBottomPane();
            anchorPaneTarget.getStyleClass().add("clickedAnchorPane");
            int weatherIndex = Integer.parseInt(anchorPaneTarget.getId().split("_")[1]);
            loadMainWeatherForecast(weatherProvider.getForecastList().get(weatherIndex));
        } catch (Exception e) {
            //Exceptions are ignored
        }
    }

    /**
     * Will run on a separate thread to prevent the GUI from freezing
     * This function will make the api call to the with the "geo.ipify.org"
     * that will find the details about your location and after that will get
     * the weather forecast for your city via the handler for the change of the city
     * also will load the country code and the afferent cities.
     *
     * @see #cityActionHandler
     */
    private void threadDispatcherGetCurrentLocationForecast() {
        TitanThread.runNewThread(() -> {
            if (!Thread.interrupted()) {
                try {
                    TitanLogger.getInstance().write("Finding location and loading forecast!", 2, 3);
                    //Make request to find the ip address

                    WeatherRequest requestMaker = new WeatherRequest();
                    String currentCityJSON = requestMaker.makeHttpRequest("https://geo.ipify.org/api/v1?apiKey=" +
                            requestMaker.getGeoApiKey());

                    //Create city object

                    JSONObject jsonObject = (new JSONObject(currentCityJSON)).getJSONObject("location");
                    City currentCity = new City("", jsonObject.getString("city"),
                            jsonObject.get("lat").toString(), jsonObject.get("lng").toString(),
                            jsonObject.getString("country"));

                    Platform.runLater(() -> {
                        countryDropdown.getSelectionModel().select(currentCity.getCountryCode());
                        cityDropdown.getSelectionModel().select(currentCity);
                        //Event will trigger and wil auto load the currentCity, we just needed to find it!
                    });
                } catch (TitanException titanException) {
                    titanException.getMessage();
                } catch (Exception e) {
                    TitanLogger.getInstance().write(e.getMessage(), 2, 1);
                }
            }
        });
    }

    /**
     * Will run on a separate thread to prevent the GUI from freezing
     * This function will make the api call with the given city information,
     * parse the response for a 7 day forecast and then load all the information
     * in the main view ( central that represents the current day
     * and the bottom grid with the next 6 day forecast ).
     *
     * @see #loadMainWeatherForecast
     * @see #loadSideWeatherForecast
     */
    public void threadDispatcherSetForecast(City city) {
        TitanThread.runNewThread(() -> {
            if (!Thread.interrupted()) {
                List<WeatherModel> weatherList = weatherProvider.getWeekWeather(city);
                //Change background images and other stuff

                /** This will make a queue for the GUI thread to execute, only the main thread is
                 * allowed to change the gui */
                Platform.runLater(() -> {
                    TitanScene.getInstance().makeGridPanesVisible(); //Only executed once
                    clearAllSelectionsFromBottomPane();
                    loadMainWeatherForecast(weatherList.get(0));
                    loadSideWeatherForecast(weatherList);
                });
            }
        });
    }

    /**
     * This function will load information regarding the nest 6 days into the Panes from the
     * bottomGridPane ( icon, weather description, min/max temps )
     *
     * @param weatherModelList list of WeatherModels to be loaded.
     */
    private void loadSideWeatherForecast(List<WeatherModel> weatherModelList) {
        //We start from 1 to < 6
        DateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy");
        DecimalFormat df = new DecimalFormat("0.0");

        for (Node child : bottomGridPane.getChildren()) {
            AnchorPane anchorPane = (AnchorPane) child;
            int weatherIndex = Integer.parseInt(anchorPane.getId().split("_")[1]);
            WeatherModel currentWeather = weatherModelList.get(weatherIndex);

            File file = new File("src/main/resources/ro/mta/se/lab/miscellaneous/icons/" + currentWeather.getWeatherIcon() + ".png");
            Image image = new Image(file.toURI().toString());
            //Get the icon
            ((ImageView) anchorPane.lookup("#bottomIcon_" + weatherIndex)).setImage(image);
            ((Label) anchorPane.lookup("#bottomDate_" + weatherIndex)).setText(dateFormat.format(currentWeather.getTimeNow()));
            ((Label) anchorPane.lookup("#bottomDescription_" + weatherIndex)).setText(currentWeather.getWeatherDescription());
            ((Label) anchorPane.lookup("#bottomMin_" + weatherIndex)).setText(df.format(Double.parseDouble(currentWeather.getMinTemp())) + "\u2103");
            ((Label) anchorPane.lookup("#bottomMax_" + weatherIndex)).setText(df.format(Double.parseDouble(currentWeather.getMaxTemp())) + "\u2103");

        }
    }

    /**
     * This function will load the given WeatherModel into the main display (center of the BorderPane) <p>
     * Will set the weather icon, and all the labels.
     *
     * @param weatherModel the WeatherModel to be loaded
     */
    private void loadMainWeatherForecast(WeatherModel weatherModel) {
        DateFormat dateFormat = new SimpleDateFormat("HH:mm");
        DateFormat nowFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm");
        //String strDate = dateFormat.format(date);

        File file = new File("src/main/resources/ro/mta/se/lab/miscellaneous/icons/" + weatherModel.getWeatherIcon() + ".png");
        Image image = new Image(file.toURI().toString());
        currentWeatherIcon.setImage(image);

        DecimalFormat df = new DecimalFormat("0.0");
        //Get all labels from the the pane
        ((Label) currentWeatherIcon.getParent().lookup("#weatherDescriptionCurrentDate")).setText(nowFormat.format(weatherModel.getTimeNow()));

        ((Label) currentWeatherIcon.getParent().lookup("#currentDegreesCLabel")).setText(df.format(Double.parseDouble(weatherModel.getCurrentTempC())) + "\u2103");
        ((Label) currentWeatherIcon.getParent().lookup("#currentDegreesFLabel")).setText(weatherModel.convertToF(weatherModel.getCurrentTempC()) + "\u2109");
        ((Label) currentWeatherIcon.getParent().lookup("#weatherDescriptionLabel")).setText(weatherModel.getWeatherDescription());
        ((Label) currentWeatherIcon.getParent().lookup("#pressureLabel")).setText(weatherModel.getPressure() + " hPa");
        ((Label) currentWeatherIcon.getParent().lookup("#cloudsLabel")).setText(weatherModel.getClouds() + " %");

        ((Label) currentWeatherIcon.getParent().lookup("#sunsetLabel")).setText(dateFormat.format(weatherModel.getSunSet()));
        ((Label) currentWeatherIcon.getParent().lookup("#sunriseLabel")).setText(dateFormat.format(weatherModel.getSunRise()));

        ((Label) currentWeatherIcon.getParent().lookup("#humidityLabel")).setText(weatherModel.getHumidity() + " %");
        ((Label) currentWeatherIcon.getParent().lookup("#uvIndexLabel")).setText(weatherModel.getUvIndex());

        ((Label) currentWeatherIcon.getParent().lookup("#windSpeedLabel")).setText(weatherModel.getWindSpeed() + " m/s");
        ((Label) currentWeatherIcon.getParent().lookup("#windDirectionLabel")).setText(weatherModel.getWindDeg() + " deg");

        //Change scene background and colors
        TitanScene.getInstance().changeBackgroundAndColorScheme(weatherModel);
    }

    /**
     * Refreshes all selections from the bottom grid ( the one with the other days of forecast ).
     */
    private void clearAllSelectionsFromBottomPane() {
        for (Node childPane : bottomGridPane.getChildren()) {
            childPane.getStyleClass().clear();
        }
    }

    /**
     * Function that transforms .json file with all city codes into the cityList.txt that we have <p>
     * It's too large (approx 40mb to do it at each run).
     */
    private void makeCityList() {
        try {
            FileWriter myWriter = new FileWriter("src/main/resources/ro/mta/se/lab/model/cityList.txt",
                    StandardCharsets.UTF_8);

            //Object obj = parser.parse(new FileReader("src/main/resources/ro/mta/se/lab/model/cityList.json"));
            String content = Files.readString(Paths.get("src/main/resources/ro/mta/se/lab/model/cityList.json"),
                    StandardCharsets.UTF_8);

            //myWriter.write("ID\tnm\tlat\tlon\tcountryCode\n");

            // A JSON object. Key value pairs are unordered. JSONObject supports java.util.Map interface.
            JSONArray jsonArray = new JSONArray(content);
            for (Object o : jsonArray) {
                // A JSON array. JSONObject supports java.util.List interface.
                JSONObject current = (JSONObject) o;
                myWriter.write(current.get("id") + "\t" + current.get("name") + "\t");

                JSONObject coordList = current.getJSONObject("coord");
                myWriter.write(coordList.get("lat") + "\t" + coordList.get("lon") + "\t");
                myWriter.write(current.get("country") + "\n");
            }
            myWriter.close();
            System.out.println("Done!\n\n");
        } catch (Exception e) {
            TitanLogger.getInstance().write(e.getMessage(), 2, 1);
        }
    }
}
